ARRAYS


(01)
function firstDuplicate(a) {
     if(a.length > 100000) return -1;
    if(a.length < 1) return -1;
    var mySet = new Set();
var duplicateIndex = a.length+1;
for(var i=0; i<a.length;i++){
    var num = a[i];
    if(a[i]<1 && a[i]>a.length) continue;
if(mySet.has(num)&& i<duplicateIndex){
duplicateIndex=i;
}else{
mySet.add(num);
}

}
return duplicateIndex==(a.length+1)?-1:a[duplicateIndex];
}


(02)
function firstNotRepeatingCharacter(s) {
    var mySet = new Set();
    var repeating = [];
    var nonRepeat = '_';
    if(s.length>100000 || s.length<1) return;
    for(var i =0; i<s.length;i++){
     var str = s[i];
     if(mySet.has(str)){
         repeating.push(str);
         mySet.delete(str);
     }else{
         if(!repeating.includes(str)){
             mySet.add(str);
         }
     }
    }
    var setArr = [...mySet];
    return setArr[0]===undefined?"_":setArr[0];
    
}

(03)
function rotateImage(a) {

   return flipMatrix(a).map(arr=>arr.reverse());
    
}

function flipMatrix(a){
    var matrix = [];
    for(var i=0; i<a[0].length;i++){
        var index = i;
       matrix.push(a.map(row=>row[index]));
    }
    return matrix;
}


(04)
function isCryptSolution(crypt, solution) {
   var numArray=[];
    if(crypt.length!=3) return false;
    for(var i =0;i<crypt.length;i++){
        var word= crypt[i];
        for(var j=0;j<word.length;j++){
            var letter = word[j];
            if(!isValidLetter(letter))return false;
            var num = getNumberPair(letter, solution);
            if(num==undefined) return false;
            if(numArray[i] == undefined){ numArray[i] = num;}
            else{
                if(hasLeadingZeroes(numArray[i])) return false;
                numArray[i] = numArray[i] + num;
            }
        }
    }
    return isValidSum(numArray);
    
}

function isValidLetter(l){
    var compStr = "AZ";
    var minValue =compStr.charCodeAt(0);
    var maxValue =compStr.charCodeAt(1);
    var asciiValue =l.charCodeAt(0);
    if(asciiValue<minValue || asciiValue>maxValue ) return false;
    return true;
}
function isValidNumber(num){
   
    if(parseInt(num)<0||parseInt(num)>9) return false;
    return true;
}

function getNumberPair(c, solution){
    var numberPair;
    solution.map(s=>{
        if(isValidNumber(s[1])) {
            if(s[0]===c) numberPair = s[1];
        }
            return s;
        })
        return numberPair;
}

function isValidSum([num1,num2,num3]){
    if(hasLeadingZeroes(num1)||hasLeadingZeroes(num2)) return false;
    if((parseInt(num1)+parseInt(num2))!=parseInt(num3)) return false;
    return true;
}

function hasLeadingZeroes(num){
    if(num.length>1&&num[0]=="0") return true;
    return false;
}



(05)
function sudoku2(grid) {
  return areColumnsAndRowsValid(grid) && are3By3GridValid(grid);
}

function areColumnsAndRowsValid(grid){
    var arr = [];
    for(var i=0;i<grid.length;i++){
      if(hasDuplicates(getColumn(grid,i),"Column: ")) return false;
      if(hasDuplicates(grid[i], "Row: ")) return false;
    }
    return true;
}

function are3By3GridValid(grid){
    if(!isValid(getSubMatrix(grid,0,0,3))) return false;
    
    if(!isValid(getSubMatrix(grid,0,3,3))) return false;
    
    if(!isValid(getSubMatrix(grid,0,6,3))) return false;
    if(!isValid(getSubMatrix(grid,3,0,3))) return false;
    
    if(!isValid(getSubMatrix(grid,3,3,3))) return false;
    
    if(!isValid(getSubMatrix(grid,3,6,3))) return false;
    if(!isValid(getSubMatrix(grid,6,0,3))) return false;
    
    if(!isValid(getSubMatrix(grid,6,3,3))) return false;
    
    if(!isValid(getSubMatrix(grid,6,6,3))) return false;
    
    return true;
}

function isValid(g){
        return !hasDuplicates(g.join(''),"3x3")?true:false;
}
function getSubMatrix(matrix, startRow, startCol, length) {
    return matrix.slice(startRow, startRow + length).map(row => row.slice(startCol, startCol + length));
}
function hasDuplicates(arr, title){
    
    var mySet = new Set();
    for(var i =0;i<arr.length;i++){
        var value = arr[i];
        if(value!='.'&&value!=','){
    if(mySet.has(value)){
        return true;
        
    console.log(`${title} ${arr}, Is Valid: false`);
    }else{
        mySet.add(value);
    }
        }
    }
    
    console.log(`${title} ${arr}, Is Valid: true`);
    return false;
}

function getColumn(grid,index){
    return grid.map(column=>column[index]);
}


LINKED LIST
(01)
function removeKFromList(l, k) {
    if(l===null) return null;
    else {
        l.next = removeKFromList(l.next,k);
        return (l.value===k)?l.next:l
    }
}

(02)
// Singly-linked lists are already defined with this interface:
// function ListNode(x) {
//   this.value = x;
//   this.next = null;
// }
//
let strArr=[];
let maxLength = 0;
function convertToString(l){
    if(l==null){
        return null;
    }else{
        l.next =convertToString(l.next);
        if(l.value.toString().length>maxLength) maxLength=l.value.toString().length;
        strArr.push(l.value.toString().padStart(4,'0'));
        return l;
    }
}
function reverseString(a){
    return a.toString().split('').reverse().join('');
}
function addTwoHugeNumbers(a, b) {
    convertToString(a);
    let strRepA = BigInt(strArr.reverse().join('')).toString();
    strArr=[];
    convertToString(b);
    let strRepB = BigInt(strArr.reverse().join(''))
    let sum = BigInt(strRepA)+ BigInt(strRepB);
    return nSizeStr(reverseString(sum.toString())).map(x=>{
        return parseInt(reverseString(x.substring(0,maxLength)));
    }).reverse()
}

function nSizeStr(str){
    return str.match(/.{1,4}/g);
}

(03)
// Singly-linked lists are already defined with this interface:
// function ListNode(x) {
//   this.value = x;
//   this.next = null;
// }
//
let arr =[];
let index = 0;
function convertToArr(l){
    if(l==null) return null;
    else{
        l.next =(convertToArr(l.next));
        // if(l.next==null) return l;
        arr.push(l.value);
        return l;
    }
}
function addTail(l,l2){
    if(l==null) {
        
        return null;
    }
    else{
        
        l.next =addTail(l.next, l2);
        if(l.next==null) l.next =l2;
        return l;
    }
}
function sort(l){
    if(l==null) {
        return null;
    }
    else{
        l.next =sort(l.next);
        l.value = arr[index];
        index = index-=1;
        return l;
    }
}
function mergeTwoLinkedLists(l1, l2) {
    if(l1==undefined &&l2===undefined) return null;
    
    if(l1==null &&l2===null) return null;
   if(l1!=null)
   {addTail(l1,l2);
   }else{
     l1=l2;
   }
     l1.toJSON();
    convertToArr(l1);
     arr=arr.sort(function(a, b){return a-b});
    // console.log(arr.sort(function(a, b){return a-b}))
    index = arr.length-1;
    sort(l1).toJSON()
    return l1;
    // convertToArr(l1).toJSON();
}


(04)
ListNode<Integer> reverseNodesInKGroups(ListNode<Integer> l, int k) {
	ListNode<Integer> head = l;
	ListNode<Integer> tail = null;
	ListNode<Integer> headToReturn = l;
 
ListNode<Integer> prev = null;
int count = 0;
while(l != null){
count++;
if(count == k){
	tail = l;
	count = 0;
	ListNode<Integer> tmpHead = reverse(head, tail);
	if (prev != null){
		prev.next =  tmpHead; 
	} else {
		headToReturn = tmpHead; 
} 
	l = head;
	prev = l; 
	head = l.next;
}
	l = l.next;
}
return headToReturn;
}
 
public ListNode<Integer> reverse(ListNode<Integer> head, ListNode<Integer> tail){
	ListNode<Integer> prev = tail.next;
	tail.next = null;
	ListNode<Integer> curr = head;
while(curr != tail){
	ListNode tmp = curr.next; 
	curr.next = prev; 
	prev = curr; 
curr = tmp;
}
curr.next = prev;
return curr;
}



HASHMAP
(01)
function groupingDishes(dishes) {
    var ingDishMap = new Map();
    var ingDishArr =[];
    
            var nameOfDish;
    dishes.map(dish=>{
        
             nameOfDish = dish[0];
        dish.map((ing,index)=>{
            if(index>0 && isIngredientContainedinMenuTwice(dishes,ing)){
          
                if(!hasIngredientsArr(ingDishArr,ing) && !hasDishArr(ingDishArr, ing, nameOfDish)){
                ingDishArr.push([ing,nameOfDish]);
                }else if(hasIngredientsArr(ingDishArr,ing) && !hasDishArr(ingDishArr, ing, nameOfDish)){
                
                    ingDishArr = setDishes(ingDishArr, ing, nameOfDish);
                    
                }
            
            
                
            }
        })
    })
    // console.log(ingDishArr)/
    return sortInAlphabeticalOrder( ingDishArr);
}

function isIngredientContainedinMenuTwice(dishes,ingName){
    
    var ingDishMap = new Map();
      dishes.map(dish=>{
        
            var nameOfDish = dish[0];
        dish.map((ing,index)=>{
            if(index>0 && ing==ingName){
            if(!hasIngredients(ingDishMap, ing)){
                
                 ingDishMap.set(ing,1)
            }else if(hasIngredients(ingDishMap, ing)){
                var count = ingDishMap.get(ing);
               count+=1;
                ingDishMap.set(ing,count);
            }
            
           
            }
        })
    })
    
     var getIngCount = ingDishMap.get(ingName);
            
        return getIngCount>=2;
            
                
}
function getDishes(hArr,ing){
    return hArr.filter(ings=>{
        if(ings[0]===ing) return true;
    })
}
function setDishes(hArr,ing,dish){
    return hArr.map(ings=>{
        if(ings[0]===ing){
            ings.push(dish);
        }
        return ings;
    });
}
function hasIngredientsArr(hArr,ing){
    
    return hArr.filter(ings=>{
        if(ings[0]===ing) return true;
    }).length>0;
    
}
function hasDishArr(hArr,ing,dish){
    
    return hArr.filter(ings=>{
        if(ings[0]===ing && ings.slice(1,ings.length).includes(dish)) {
            return true;
        }
    }).length>0;
    
}
function hasIngredients(hMap, ing){
    if(hMap.has(ing)) return true;
    return false
}

function hasDish(hMap, ing, dish){
  var ingMap = hMap.get(ing); 
  if(!ingMap) return false;
    else return ingMap.includes(dish);
}

function sortInAlphabeticalOrder(arrs){
   return arrs.map(arr=>{
    var ingKey = arr[0];
    var dishes = arr.slice(1,arr.length).sort(sortLexicographically);
    var newArr = [ingKey,...dishes];
    return newArr;
    }).sort(sortLexicographically);
}

function sortLexicographically(a,b){
     var s =Array.isArray(a)?a[0]:a;
     var t =Array.isArray(b)?b[0]:b;
    var length =0;
    if(s.length>=t.length) length =s.length;
    if(s.length<=t.length) length = t.length;
    for(var i=0; i<length;i++){
        if(s[i] < t[i] ||  s[i] == undefined) { return -1;}
             if(s[i] > t[i] ||  t[i] == undefined){return 1; }

    }
    return 0;
}


(02)
function areFollowingPatterns(strings, patterns) {
        if(patterns==null || strings==null) return false;
        if(patterns.length != strings.length ) return false;
        if(strings.length>100000 || strings.length<0) return false;
        var length =patterns.length;
        var hash={}, reverse={};
       return strings.every((s,i)=>{
            var p =patterns[i];
            if(!hash[p]) hash[p]= s;
            if(!reverse[s]) reverse[s] = p;
           
            return (reverse[s]==p && hash[p]==s )
        });
}



(03)
function containsCloseNums(nums, k) {
    var hash= {};
    return nums.some((n,i)=>{
        if(!hash[n]){
            hash[n] =i+2;
        }
        else{
            var index = hash[n]-2;
            if((i - index)<=k) return true;
	    else hash[n] = i+2;
          
        }
         return false;
    })
}


(04)
function possibleSums(coins, quantity) {
    const sums = new Set([0]);

    for (let i = 0; i < quantity.length; ++i) {
        let sumsNow = Array.from(sums);
        console.log(sumsNow)
        for (let sum of sumsNow) {
            for (let j = 1; j <= quantity[i]; ++j) {
                sums.add(sum + j * coins[i]);
            }
        }
    }
    
    return sums.size - 1;
}


Trees	
(01)
//
// Binary trees are already defined with this interface:
// function Tree(x) {
//   this.value = x;
//   this.left = null;
//   this.right = null;
// }
function hasPathWithGivenSum(t, s) {
  if (!t) return false;
    s -= t.value;
    if (!t.left && !t.right) {
        return s === 0;
    }
    return hasPathWithGivenSum(t.left, s) || hasPathWithGivenSum(t.right, s);
}

(02)
//
// Binary trees are already defined with this interface:
// function Tree(x) {
//   this.value = x;
//   this.left = null;
//   this.right = null;
// }

function performCheck(t1,t2){
    if(t1==null && t2==null) return true;
    if((t1==null && t2!=null) || (t2==null && t1!=null)) return false;
    if(t1.value!=t2.value) return false;
    
    return performCheck(t1.right,t2.left) && performCheck(t1.left,t2.right);
}
function isTreeSymmetric(t) {
    return performCheck(t, t);
}

(03)
function findProfession(level,pos)
{
  if(level==1)
  {
    return "Engineer";
  }

  var p = findProfession((level-1), Math.floor((pos+1)/2));

  if(p=="Engineer")
  {
    return (pos%2)==1?"Engineer":"Doctor";
  }
  else if(p=="Doctor")
  {
    return (pos%2)==1?"Doctor":"Engineer";
  }
}

(04)

function kthSmallestInBST(t, k) {
 if(!t) return null;
var sorted = traverse(t);
return sorted.length<k? null: sorted[k-1];
}

function traverse(t){
    if(!t) return [];
    var left;
    var right; 
    left = traverse(t.left);
    right = traverse(t.right);
    return left.concat([t.value].concat(right));
}

(05)
//
// Binary trees are already defined with this interface:
// function Tree(x) {
//   this.value = x;
//   this.left = null;
//   this.right = null;
// }
var equal = false
function isSubtree(t1, t2) {
    if(!t2) return true;
    if(!t1) return false;
     if( isEqual(t1, t2)) return true;
     
     return isSubtree(t1.left, t2) || isSubtree(t1.right, t2)
}

function isEqual(t1,t2){
    if(!t2) return !t1;
    if(!t1) return false;
    if(t1.value != t2.value) return false ; 
    return isEqual(t1.left, t2.left) && isEqual(t1.right, t2.right);
}

(06)
//
// Binary trees are already defined with this interface:
// function Tree(x) {
//   this.value = x;
//   this.left = null;
//   this.right = null;
// }
function restoreBinaryTree(inorder, preorder) {
    var root = preorder[0];
    if(inorder.length==0 || inorder===undefined || inorder ==null) return null;
    var node = new Tree(root);
    var rootIndex = inorder.indexOf(root);
    
    var inLeftChildren  = inorder.slice(0,rootIndex);
    var inRightChildren = inorder.slice((rootIndex+1));
    var rightChildIndex = GetMaxIndexInArr(inLeftChildren, preorder)+1;
    
    var preLeftValues = preorder.slice(1,rightChildIndex);
    var preRightValues = preorder.slice(rightChildIndex);
    
    node.left = restoreBinaryTree(inLeftChildren,preLeftValues);
    node.right = restoreBinaryTree(inRightChildren,preRightValues);
    return node;
}
//Use inorder to trace roots
// Use preorder to trace position
//solve using divide and conquer
//break into subtrees and get corresponding orders
function GetMaxIndexInArr(arr1, arr2){
    var max = 0;
    for(var i=0;i<arr1.length;i++){
       var index =  arr2.indexOf(arr1[i]);
       if(index>max) max=index;
    }
    return max;
}

(07)
function findSubstrings(words, parts) {
    //loop through the words
    //for each word check for longest substring
    //pick the first occurrence and replace with [part]
    var wordsToReturn = [];
    for(var i =0; i<words.length;i++){
        var word = words[i];
        var partlength =0;
        console.log(word)
        var filteredPart = parts.filter(part=>{
            if(word.indexOf(part)!=-1 && part.length>partlength){
                partlength = part.length; return true;
            }
        }).sort();
        if(filteredPart&& filteredPart.length>0){
        var part =filteredPart[filteredPart.length-1];
        word = manipulateString(word,part);
       //console.log(word)//.splice(index,part.length,`[${part}]`));
    //    word = Array.from(word).splice(index,part.length,`[${part}]`).join('');
        }
        
        wordsToReturn.push(word)
    }
    return wordsToReturn
}

function manipulateString(word, part){
    
       var index = word.indexOf(part);
       var newWord ="";
       for(var i = 0; i<word.length;i++){
           var c = word[i];
           if(i==index) c = "["+c;
           if(i == (index+part.length-1)) c = c+"]";
           newWord+= c
       }
       return newWord;
}

(07)
 const rightmost = node => node.right 
        ? rightmost(node.right) 
        : node
    const noRightmost = node => {
        if (!node.right) return node.left
        node.right = noRightmost(node.right)
        return node
    }
    const trim = (node, value) => {
        if (node === null) return null
        if (node.value === value) {
            if (node.left === null) return node.right
            let next = rightmost(node.left)
            next.left = noRightmost(node.left)
            next.right = node.right
            return next
        }
        node.left = trim(node.left, value)
        node.right = trim(node.right, value)
        return node
    }
    
    return queries.reduce((acc, query) => trim(acc, query), t)


Dynamic Programming
(01)
var count ={};
count[1] = 1;
count[2] =2;

function climbingStairs(n) {
    if(count[n]) return count[n];
    count[n] = climbingStairs(n-2) +climbingStairs(n-1);
    return count[n];

}

function houseRobber(nums) {
    
    if(nums.length==0) return 0;
    if(nums.length==1) return nums[0];
    if(nums.length==2) return Math.max(nums[0],nums[1])
    
    var robbedHouse = [];
    robbedHouse = [nums[0],Math.max(nums[0],nums[1])]
                console.log(robbedHouse)

     for( let i=2;i<nums.length;i++){

                        robbedHouse[i] = Math.max(robbedHouse[i-1],robbedHouse[i-2]+nums[i])
                }
                console.log(robbedHouse)
        return robbedHouse[nums.length-1]
}

(03)
var numberRanges = [];

function composeRanges(nums) {
        var count = 0;
        if(nums.length==1) return [`${nums[0]}`]
        for(var i =0; i<nums.length;i++){
            if(!numberRanges[count]) numberRanges[count] = `${nums[i]}`;
            if(nums[i+1]-nums[i]!=1){
                 if(numberRanges[count]&&!numberRanges[count].includes(`${nums[i]}`)) numberRanges[count] = numberRanges[count]+=`${nums[i]}`;
                 count+=1;
            }else{
                
            if(numberRanges[count] && !numberRanges[count].includes("->")) numberRanges[count] = numberRanges[count]+="->";
            
        }
        }
        
        return numberRanges
}


(04)
function mapDecoding(message) {
    var DP = [],
        len = message.length,
        mod = 1e9+7;
    
    //As above, there is one way to decode the end of the string
    DP[len] = 1;
    //And no ways to decode past the end of the string
    DP[len+1] = 0;
    
    for(var i=len; i--; )
        DP[i] = message[i] == '0' ? 0 :
            (DP[i+1] + (+message.substr(i,2) < 27 ? DP[i+2] : 0)) % mod;
    return DP[0];
}


function sumOfTwo(a, b, v) {
   b = new Set(b);
    return a.some(e => b.has(v - e))
  
}






console.log('Practice makes Perfect!'); 
/**
  You are given a family tree represented as 2D list of numbers. 
Each list within this “major” list contains two numbers only - [[0,6], [2,0], [2,5], [4,5], [7,2], [9,2], [1,4]]
the first number uniquely identifies a person and the second number is for one of his/her immediate ancestors/parents.

		6
    |
    0    5
     \  / \
	   2     4
	  / \    /
	7   9   1
  
  
A] - Return a 2D-array/list where the first list contains all the orphans and the second list contains people with only one parent
B] - Given two people IDs or numbers, return true/false depending on if they’re related or not

e.g. [0, 4] -> False, [7, 1] -> True because of 5

*/


//Determine Only one Parent
//-Create a set
//- Traverse the list and determine unique values
//- Delete duplicates

//Determine Orphans
//- Get a list of unique persons
//- Get list of unique ancestors
//- Find the difference
var arr = [[2,0], [2,5], [4,5], [7,2], [9,2], [1,4]];

function GetOrphans(arr){
   let length = arr.length;
  //let map = {};
  let ancestors = {};
  let single=[];
  let orphans=[];
  for(let i =0; i<length;i++){
    let combo = arr[i];
    let person = combo[0];
    let ancestor = combo[1];
    if(ancestors[person]===undefined){
      ancestors[person] = [ancestor]
    }else{
      ancestors[person].push(ancestor)
    }
    
    if(ancestors[ancestor]===undefined){
      ancestors[ancestor] = []
    }
    
  }
   for(var key in ancestors){
     var value = ancestors[key];
     
     if(value.length==0)orphans.push(key);
     
     if(value.length==1) single.push(key);
   }
  
  return [orphans,single];
  
  
}
//GetSingleParent(arr);
var result = GetOrphans(arr);//[GetOrphans(arr),GetSingleParent(arr)];
 console.log(result)




console.log('Practice makes Perfect!');  
/**
  You are given a family tree represented as 2D list of numbers. 
Each list within this “major” list contains two numbers only - [[0,6], [2,0], [2,5], [4,5], [7,2], [9,2], [1,4]]
the first number uniquely identifies a person and the second number is for one of his/her immediate ancestors/parents.

	 6
   |
   0    5
    \  / \
	   2    4
	  / \   /
	 7   9 1
  
  
A] - Return a 2D-array/list where the first list contains all the orphans and the second list contains people with only one parent
B] - Given two people IDs or numbers, return true/false depending on if they’re related or not
C] - Return the id or IDs of the oldest ancestors in this family tree.

e.g. [0, 4] -> False, [7, 1] -> True because of 5

*/

var arr = [[0,6],[2,0], [2,5], [4,5], [7,2], [9,2], [1,4]];

/**
[7,1]

{0} -> [6]
{2} -> [0,6,5]
{4} -> [5]
{7} -> [2,0,5,6]
{9} -> [2,0,5,6]
{1} -> [4,5]

*/

function IsRelated(arr){
  let map = {};
  
  for(var i=0; i<arr.length;i++){
    let combo = arr[i];
    let child = combo[0];
    let parent = combo[1];
    
    let myArr =[];
    if(map[child]==undefined){
      map[child]= myArr;
    }
      //Parent has parent
    if(map[parent]!=undefined){
      myArr = [...map[parent]];
      myArr.push(parent);
    }
    else{
      myArr = [parent];
    }
    
  map[child] = myArr;
  }
  console.log(map)
}


//console.log(m)
  IsRelated(arr)

//  first question
//  Determine Only one Parent
//- Create a set
//- Traverse the list and determine unique values
//- Delete duplicates

//Determine Orphans
//- Get a list of unique persons
//- Get list of unique ancestors
//- Find the difference



