Detecting Offline Mode in service workers

1) Using The Windows Navigator
You can determine is a system is connected to a network via window.navigator.onLine. However this isnt reliable as it doesnt tell you if the system has internet connection.
It only tells you if the system is connected to a network;

Note: If it is false then it means the browser is definitely not connected to the internet. But when it is true it can be a false positive
Implementations
if(window.navigator.onLine){
  ()=> console.log("Internet Connection")

}else{
    console.log("No Internet")
}

2) Windows Offline Event listener
This has the same cons as the navigator. But its an event listener and thats a pro;

Implementations
window.addEventListener("offline", 
  ()=> console.log("No Internet")
);

window.addEventListener("online", 
  ()=> console.log("Internet Connection")
);

3) Send a request to a server resource e.g google
This is a more reliable approach to determining if a system is offline however it has its own caveat. Its dependent on the uptime of the server.
 Using your own server resource is always better 
 
 Implementations
 fetch('/favicon.ico?d='+Date.now())
  .then(response => {
    if (!response.ok)
      throw new Error('Network response was not ok');

   // At this point we can safely assume the user has connection to the internet
        console.log("Internet connection available"); 
  })
  .catch(error => {
  // The resource could not be reached
        console.log("No Internet connection", error);
  });

 but if the uptime of your server is not sure then its better to use a very reliable resource like Google(with no-cors policy)
 
 Implementations
 fetch('https://google.com', {
        method: 'GET', // *GET, POST, PUT, DELETE, etc.
        mode: 'no-cors',
    }).then((result) => {
        console.log("Internet Connection")
    }).catch(e => {
        console.log("No Internet Connection")
    })

Cons
Sometimes a request may not be successful if the server is down and this doesnt translate to no internet connection. 



HOW DOES IT TIE INTO SERVICE WORKERS
Service Workers are used to deliver resources with offline capability. We can use a combination of 1 and 3 since service workers already have fetch event listeners.

Implementations
const doOnlineCheck =()=>{
    return new Promise((resolve,reject)=>{
        fetch('https://google.com', {
        method: 'GET', // *GET, POST, PUT, DELETE, etc.
        mode: 'no-cors',
    }).then((result) => {
        resolve(true)
    }).catch(e => {
        resolve(false);
    })
    })
}
self.addEventListener('fetch', (event) => {
  const requestURL = new URL(event.request.url);
    let isTrulyOnline;
  if (requestURL.origin === location.origin) {
    // Load static assets from cache if network is down
    if (/\.(css|js|woff|woff2|ttf|eot|svg)$/.test(requestURL.pathname)) {
      event.respondWith(
        caches.open(CACHE_NAME).then(cache =>
          caches.match(event.request).then((result) => {
            if (navigator.onLine === false) {
              // We are offline for sure so return the cached version immediately, null or not.
              return result;
            }

            isTrulyOnline = await doOnlineCheck();
            if(!isTrulyOnline){
                // We are offline for sure so return the cached version immediately, null or not.
              return result;
            }
            // We are online so let's run the request to make sure our content
            // is up-to-date.
            return fetch(event.request).then((response) => {
              // Save the result to cache for later use.
              cache.put(event.request, response.clone());
              return response;
            });
          }),
        ),
      );
      return;
    }
  }

  if(isTrulyOnline==undefined) isTrulyOnline = await doOnlineCheck();
  if (event.request.mode === 'navigate' && navigator.onLine === false && !isTrulyOnline) {
    // Uh-oh, we navigated to a page while offline. Let's show our default page.
    event.respondWith(caches.match(OFFLINE_URL));
    return;
  }

  // Passthrough for everything else
  event.respondWith(fetch(event.request));
});


Using event listener 
window.addEventListener("offline", 
  ()=> {
    // Update your UI to reflect that there's no connection.
  }
);

window.addEventListener("online", 
  ()=>{
      const isTrulyOnline = await doOnlineCheck();
      if(!isTrulyOnline){
        // Update your UI to reflect that there's no connection.
      }
  }
);


Some resources
https://stackoverflow.com/questions/46036897/best-practices-for-detecting-offline-state-in-a-service-worker
https://stackoverflow.com/questions/189430/detect-the-internet-connection-is-offline
https://levelup.gitconnected.com/detecting-online-offline-in-javascript-1963c4fb81e1